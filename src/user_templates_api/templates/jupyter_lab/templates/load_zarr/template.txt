{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Retrieve anndata from remote zarr storage\n",
    "\n",
    "This template shows how to work with the remote zarr stores for anndata in the HuBMAP Data Portal.\n",
    "\n",
    "[Zarr](https://zarr.dev) is a way of storing large N-dimensional arrays, and is a great way to store anndata and load it quicker than with h5ad. The [Zarr-Python docs](https://zarr.readthedocs.io/en/stable/) describe how to work with zarr in Python. Many of the anndata is both stored in h5ad and in zarr format in the portal. However, one main caveat of this remote zarr storage, is that the common function [zarr.hierarchy](https://zarr.readthedocs.io/en/stable/api/hierarchy.html) cannot be run (as well as [zarr.tree](https://zarr.readthedocs.io/en/stable/api/convenience.html#zarr.convenience.tree)). As the newer function [zarr.consolidate_metadata](https://zarr.readthedocs.io/en/stable/api/convenience.html#zarr.convenience.consolidate_metadata) which resolves this issue has not been run on many of the Portal resources, this notebook shows how to work with the zarr storage when the hierarchy cannot be retrieved.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install --upgrade pip\n",
    "!pip install pandas requests anndata zarr aiohttp fsspec ipython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from csv import DictReader, excel_tab\n",
    "from io import StringIO\n",
    "import json\n",
    "import requests\n",
    "import warnings\n",
    "\n",
    "import anndata as ad\n",
    "import pandas as pd\n",
    "import zarr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linked datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "uuids = {{ uuids | safe }}\n",
    "\n",
    "search_api = 'https://search.api.hubmapconsortium.org/v3/portal/search'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## See information about remote zarr storage\n",
    "Anndata consist of various data arrays, such as _X_ and _obs_ ([documentation](https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.html)). When we open the root storage, we can see which of the main classes are present as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def see_remote_zarr_variables(zarr_url, verbose=True):\n",
    "    '''\n",
    "    Checking which classes are present at a remote zarr storage.\n",
    "\n",
    "    Options: X, obs, var, uns, obsm, varm, layers, raw, obsp, varp\n",
    "\n",
    "    Documentation: \n",
    "    - https://anndata.readthedocs.io/en/latest/generated/anndata.AnnData.html\n",
    "    - https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    \n",
    "    '''\n",
    "    root = zarr.open(zarr_url)\n",
    "\n",
    "    groups = ['X', 'obs', 'var', 'uns', 'obsm', 'varm', 'layers', 'raw', 'obsp', 'varp']\n",
    "\n",
    "    existing_groupings = {}\n",
    "    for group in groups:\n",
    "        try:\n",
    "            at = root[group].attrs\n",
    "            if verbose: \n",
    "                print(f'The variable {group} exists. Child groupings are: {dict(at)}')\n",
    "            existing_groupings[group] = dict(at)\n",
    "        except:\n",
    "            if verbose: \n",
    "                print(f'The variable {group} does not exist.')\n",
    "\n",
    "    return(existing_groupings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'X': {},\n",
       " 'obs': {'_index': '_index',\n",
       "  'column-order': ['n_genes',\n",
       "   'initial_size_unspliced',\n",
       "   'initial_size_spliced',\n",
       "   'initial_size',\n",
       "   'n_counts',\n",
       "   'leiden',\n",
       "   'velocity_self_transition'],\n",
       "  'encoding-type': 'dataframe',\n",
       "  'encoding-version': '0.1.0'},\n",
       " 'var': {'_index': '_index',\n",
       "  'column-order': ['hugo_symbol',\n",
       "   'n_cells',\n",
       "   'gene_count_corr',\n",
       "   'means',\n",
       "   'dispersions',\n",
       "   'dispersions_norm',\n",
       "   'highly_variable',\n",
       "   'fit_r2',\n",
       "   'fit_alpha',\n",
       "   'fit_beta',\n",
       "   'fit_gamma',\n",
       "   'fit_t_',\n",
       "   'fit_scaling',\n",
       "   'fit_std_u',\n",
       "   'fit_std_s',\n",
       "   'fit_likelihood',\n",
       "   'fit_u0',\n",
       "   'fit_s0',\n",
       "   'fit_pval_steady',\n",
       "   'fit_steady_u',\n",
       "   'fit_steady_s',\n",
       "   'fit_variance',\n",
       "   'fit_alignment_scaling',\n",
       "   'velocity_genes',\n",
       "   'top_highly_variable'],\n",
       "  'encoding-type': 'dataframe',\n",
       "  'encoding-version': '0.1.0'},\n",
       " 'uns': {},\n",
       " 'obsm': {},\n",
       " 'varm': {},\n",
       " 'layers': {},\n",
       " 'obsp': {}}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zarr_url = f'https://assets.hubmapconsortium.org/{uuids[0]}/hubmap_ui/anndata-zarr/scvelo_annotated.zarr'\n",
    "see_remote_zarr_variables(zarr_url, verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is information that can't be retrieved like this. An example is a categorical mapping or anything stored in uns. Luckily, because to store a zarr Group, we will have a .zgroup file, we can query the search API and retrieve some more information!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_zarr_paths(uuids, search_api = 'https://search.api.hubmapconsortium.org/v3/portal/search'):\n",
    "    hits = json.loads(\n",
    "            requests.post(\n",
    "                search_api,\n",
    "                json={\n",
    "                    'size': 10000,\n",
    "                    'query': {'ids': {'values': uuids}},\n",
    "                    '_source': ['files']\n",
    "                }, \n",
    "            ).text\n",
    "        )['hits']['hits']\n",
    "\n",
    "    uuid_to_files = {}\n",
    "    for hit in hits:\n",
    "        # get all the file_paths for a dataset\n",
    "        file_paths = [file['rel_path'] for file in hit['_source']['files']]\n",
    "\n",
    "        # filter file_paths for zarr\n",
    "        file_paths_zarr = [file_name for file_name in file_paths if 'zarr' in file_name]\n",
    "        \n",
    "        # get the roots of the zarr groups\n",
    "        root_files = [file_name.replace('.zarr/.zgroup', '') for file_name in file_paths_zarr if '.zarr/.zgroup' in file_name]\n",
    "\n",
    "        # create a dictionary from root to extension\n",
    "        root_files_to_files = {root_file : [file.replace(root_file + '.zarr/', '') for file in file_paths_zarr if root_file in file] for root_file in root_files}\n",
    "        \n",
    "        uuid_to_files[hit['_id']] = root_files_to_files\n",
    "    \n",
    "    return uuid_to_files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use this information to now set up a way to retrieve anndata from the zarr storage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'6b5d4d3a6af69a3bb82c4768cd24396c': {'hubmap_ui/anndata-zarr/scvelo_annotated': ['.zgroup',\n",
       "   'layers/.zgroup',\n",
       "   'layers/spliced/.zgroup',\n",
       "   'layers/spliced_unspliced_sum/.zgroup',\n",
       "   'layers/unspliced/.zgroup',\n",
       "   'obs/.zgroup',\n",
       "   'obs/__categories/.zgroup',\n",
       "   'obsm/.zgroup',\n",
       "   'obsp/.zgroup',\n",
       "   'obsp/connectivities/.zgroup',\n",
       "   'obsp/distances/.zgroup',\n",
       "   'uns/.zgroup',\n",
       "   'uns/leiden/.zgroup',\n",
       "   'uns/leiden/params/.zgroup',\n",
       "   'uns/neighbors/.zgroup',\n",
       "   'uns/neighbors/params/.zgroup',\n",
       "   'uns/pca/.zgroup',\n",
       "   'uns/pca/params/.zgroup',\n",
       "   'uns/recover_dynamics/.zgroup',\n",
       "   'uns/umap/.zgroup',\n",
       "   'uns/umap/params/.zgroup',\n",
       "   'uns/velocity_graph/.zgroup',\n",
       "   'uns/velocity_graph_neg/.zgroup',\n",
       "   'uns/velocity_params/.zgroup',\n",
       "   'var/.zgroup',\n",
       "   'var/__categories/.zgroup',\n",
       "   'varm/.zgroup'],\n",
       "  'hubmap_ui/anndata-zarr/secondary_analysis': ['.zgroup',\n",
       "   'layers/.zgroup',\n",
       "   'layers/spliced/.zgroup',\n",
       "   'layers/spliced_unspliced_sum/.zgroup',\n",
       "   'layers/unscaled/.zgroup',\n",
       "   'layers/unspliced/.zgroup',\n",
       "   'obs/.zgroup',\n",
       "   'obs/__categories/.zgroup',\n",
       "   'obsm/.zgroup',\n",
       "   'obsp/.zgroup',\n",
       "   'obsp/connectivities/.zgroup',\n",
       "   'obsp/distances/.zgroup',\n",
       "   'uns/.zgroup',\n",
       "   'uns/annotation_metadata/.zgroup',\n",
       "   'uns/annotation_metadata/ASCTB/.zgroup',\n",
       "   'uns/annotation_metadata/azimuth/.zgroup',\n",
       "   'uns/annotation_metadata/azimuth_reference/.zgroup',\n",
       "   'uns/annotation_metadata/azimuth_to_ASCTB_mapping/.zgroup',\n",
       "   'uns/annotation_metadata/seurat/.zgroup',\n",
       "   'uns/hvg/.zgroup',\n",
       "   'uns/leiden/.zgroup',\n",
       "   'uns/leiden/params/.zgroup',\n",
       "   'uns/neighbors/.zgroup',\n",
       "   'uns/neighbors/params/.zgroup',\n",
       "   'uns/pca/.zgroup',\n",
       "   'uns/pca/params/.zgroup',\n",
       "   'uns/rank_genes_groups/.zgroup',\n",
       "   'uns/rank_genes_groups/params/.zgroup',\n",
       "   'uns/umap/.zgroup',\n",
       "   'uns/umap/params/.zgroup',\n",
       "   'uns/umap_density_params/.zgroup',\n",
       "   'var/.zgroup',\n",
       "   'var/__categories/.zgroup',\n",
       "   'varm/.zgroup']}}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_zarr_paths(uuids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retrieve individual parts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files with zarr storage for this dataset: ['hubmap_ui/anndata-zarr/scvelo_annotated', 'hubmap_ui/anndata-zarr/secondary_analysis']\n",
      "Selected file: hubmap_ui/anndata-zarr/scvelo_annotated\n",
      "Groupings for this zarr storage: ['.zgroup', 'layers/.zgroup', 'layers/spliced/.zgroup', 'layers/spliced_unspliced_sum/.zgroup', 'layers/unspliced/.zgroup', 'obs/.zgroup', 'obs/__categories/.zgroup', 'obsm/.zgroup', 'obsp/.zgroup', 'obsp/connectivities/.zgroup', 'obsp/distances/.zgroup', 'uns/.zgroup', 'uns/leiden/.zgroup', 'uns/leiden/params/.zgroup', 'uns/neighbors/.zgroup', 'uns/neighbors/params/.zgroup', 'uns/pca/.zgroup', 'uns/pca/params/.zgroup', 'uns/recover_dynamics/.zgroup', 'uns/umap/.zgroup', 'uns/umap/params/.zgroup', 'uns/velocity_graph/.zgroup', 'uns/velocity_graph_neg/.zgroup', 'uns/velocity_params/.zgroup', 'var/.zgroup', 'var/__categories/.zgroup', 'varm/.zgroup']\n"
     ]
    }
   ],
   "source": [
    "# get dictionary and print zarr root files\n",
    "zarr_dict = get_zarr_paths(uuids)[uuids[0]]\n",
    "\n",
    "zarr_root_files = list(zarr_dict.keys())\n",
    "print(f'Files with zarr storage for this dataset: {zarr_root_files}')\n",
    "\n",
    "# select the first zarr root file\n",
    "selected_file = zarr_root_files[0]\n",
    "print(f'Selected file: {selected_file}')\n",
    "\n",
    "# get the relative groupings for this\n",
    "relative_files = zarr_dict[selected_file]\n",
    "print(f'Groupings for this zarr storage: {relative_files}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>1990</th>\n",
       "      <th>1991</th>\n",
       "      <th>1992</th>\n",
       "      <th>1993</th>\n",
       "      <th>1994</th>\n",
       "      <th>1995</th>\n",
       "      <th>1996</th>\n",
       "      <th>1997</th>\n",
       "      <th>1998</th>\n",
       "      <th>1999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.193242</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.35512</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.586357</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.953532</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 2000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   0     1     2     3         4         5     6     7     8     9     ...  \\\n",
       "0   0.0   0.0   0.0   0.0  0.000000  0.000000   0.0   0.0   0.0   0.0  ...   \n",
       "1   0.0   0.0   0.0   0.0  0.000000  0.193242   0.0   0.0   0.0   0.0  ...   \n",
       "2   0.0   0.0   0.0   0.0  0.000000  0.000000   0.0   0.0   0.0   0.0  ...   \n",
       "3   0.0   0.0   0.0   0.0  0.586357  0.000000   0.0   0.0   0.0   0.0  ...   \n",
       "4   0.0   0.0   0.0   0.0  0.000000  0.000000   0.0   0.0   0.0   0.0  ...   \n",
       "\n",
       "   1990  1991      1992  1993  1994  1995  1996     1997  1998  1999  \n",
       "0   0.0   0.0  0.000000   0.0   0.0   0.0   0.0  0.00000   0.0   0.0  \n",
       "1   0.0   0.0  0.000000   0.0   0.0   0.0   0.0  0.35512   0.0   0.0  \n",
       "2   0.0   0.0  0.000000   0.0   0.0   0.0   0.0  0.00000   0.0   0.0  \n",
       "3   0.0   0.0  0.953532   0.0   0.0   0.0   0.0  0.00000   0.0   0.0  \n",
       "4   0.0   0.0  0.000000   0.0   0.0   0.0   0.0  0.00000   0.0   0.0  \n",
       "\n",
       "[5 rows x 2000 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the zarr_url for this dataset and file\n",
    "zarr_url = f'https://assets.hubmapconsortium.org/{uuids[0]}/{selected_file}.zarr'\n",
    "\n",
    "# get the X array\n",
    "X_arr = zarr.open(zarr_url + \"/X\")\n",
    "\n",
    "# load as pandas DataFrame\n",
    "X_df = pd.DataFrame(X_arr)\n",
    "X_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the .attrs as before to get the column names for the obs and var dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_dfs_obs_var(zarr_url, attr_name, mapping=None):\n",
    "    if attr_name not in ['obs', 'var']: \n",
    "        return\n",
    "    \n",
    "    attr_root = zarr.open(f'{zarr_url}/{attr_name}')\n",
    "\n",
    "    attr_index = attr_root[attr_root.attrs['_index']]\n",
    "    attr_columns = attr_root.attrs['column-order']\n",
    "\n",
    "    attr_df = pd.DataFrame(index=attr_index, columns=attr_columns)\n",
    "\n",
    "    for col in attr_columns:\n",
    "        col_arr = zarr.open(f'{zarr_url}/{attr_name}/{col}')\n",
    "        attr_df[col] = col_arr\n",
    "\n",
    "    if mapping: \n",
    "        try: \n",
    "            mapping_group = attr_root[mapping]\n",
    "            for col in attr_columns:\n",
    "                try:\n",
    "                    categories = mapping_group[col][()]\n",
    "                    mapping_categories = dict(zip(list(range(len(categories))), categories))\n",
    "                    attr_df[col] = attr_df[col].map(mapping_categories)\n",
    "                except:\n",
    "                    pass\n",
    "        except: \n",
    "            warnings.warn(f'Mapping {mapping} is not valid.')\n",
    "\n",
    "    return attr_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_genes</th>\n",
       "      <th>initial_size_unspliced</th>\n",
       "      <th>initial_size_spliced</th>\n",
       "      <th>initial_size</th>\n",
       "      <th>n_counts</th>\n",
       "      <th>leiden</th>\n",
       "      <th>velocity_self_transition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAAAAACCGCATTT</th>\n",
       "      <td>1408</td>\n",
       "      <td>464.344788</td>\n",
       "      <td>1878.552979</td>\n",
       "      <td>1878.552979</td>\n",
       "      <td>473.639679</td>\n",
       "      <td>2</td>\n",
       "      <td>0.017104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACACGGTAAC</th>\n",
       "      <td>1188</td>\n",
       "      <td>993.378540</td>\n",
       "      <td>1395.347656</td>\n",
       "      <td>1395.347656</td>\n",
       "      <td>447.176758</td>\n",
       "      <td>3</td>\n",
       "      <td>0.060644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACACTTAGAA</th>\n",
       "      <td>370</td>\n",
       "      <td>92.955063</td>\n",
       "      <td>354.261566</td>\n",
       "      <td>354.261597</td>\n",
       "      <td>398.229431</td>\n",
       "      <td>1</td>\n",
       "      <td>0.103806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACCAATCTGG</th>\n",
       "      <td>669</td>\n",
       "      <td>388.409729</td>\n",
       "      <td>746.034668</td>\n",
       "      <td>746.034668</td>\n",
       "      <td>432.216125</td>\n",
       "      <td>2</td>\n",
       "      <td>0.059894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACCATGTTGA</th>\n",
       "      <td>665</td>\n",
       "      <td>180.005600</td>\n",
       "      <td>749.619324</td>\n",
       "      <td>749.619385</td>\n",
       "      <td>410.186157</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                n_genes  initial_size_unspliced  initial_size_spliced  \\\n",
       "AAAAAACCGCATTT     1408              464.344788           1878.552979   \n",
       "AAAAACACGGTAAC     1188              993.378540           1395.347656   \n",
       "AAAAACACTTAGAA      370               92.955063            354.261566   \n",
       "AAAAACCAATCTGG      669              388.409729            746.034668   \n",
       "AAAAACCATGTTGA      665              180.005600            749.619324   \n",
       "\n",
       "                initial_size    n_counts  leiden  velocity_self_transition  \n",
       "AAAAAACCGCATTT   1878.552979  473.639679       2                  0.017104  \n",
       "AAAAACACGGTAAC   1395.347656  447.176758       3                  0.060644  \n",
       "AAAAACACTTAGAA    354.261597  398.229431       1                  0.103806  \n",
       "AAAAACCAATCTGG    746.034668  432.216125       2                  0.059894  \n",
       "AAAAACCATGTTGA    749.619385  410.186157       1                  0.011691  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_obs = get_dfs_obs_var(zarr_url, 'obs')\n",
    "df_obs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes there are mappings also stored in the zarr storage, that convert a categorical column with a mapping into the true values. These can be stored under another group in the zarr storage. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_genes</th>\n",
       "      <th>initial_size_unspliced</th>\n",
       "      <th>initial_size_spliced</th>\n",
       "      <th>initial_size</th>\n",
       "      <th>n_counts</th>\n",
       "      <th>leiden</th>\n",
       "      <th>velocity_self_transition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AAAAAACCGCATTT</th>\n",
       "      <td>1408</td>\n",
       "      <td>464.344788</td>\n",
       "      <td>1878.552979</td>\n",
       "      <td>1878.552979</td>\n",
       "      <td>473.639679</td>\n",
       "      <td>2</td>\n",
       "      <td>0.017104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACACGGTAAC</th>\n",
       "      <td>1188</td>\n",
       "      <td>993.378540</td>\n",
       "      <td>1395.347656</td>\n",
       "      <td>1395.347656</td>\n",
       "      <td>447.176758</td>\n",
       "      <td>3</td>\n",
       "      <td>0.060644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACACTTAGAA</th>\n",
       "      <td>370</td>\n",
       "      <td>92.955063</td>\n",
       "      <td>354.261566</td>\n",
       "      <td>354.261597</td>\n",
       "      <td>398.229431</td>\n",
       "      <td>1</td>\n",
       "      <td>0.103806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACCAATCTGG</th>\n",
       "      <td>669</td>\n",
       "      <td>388.409729</td>\n",
       "      <td>746.034668</td>\n",
       "      <td>746.034668</td>\n",
       "      <td>432.216125</td>\n",
       "      <td>2</td>\n",
       "      <td>0.059894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AAAAACCATGTTGA</th>\n",
       "      <td>665</td>\n",
       "      <td>180.005600</td>\n",
       "      <td>749.619324</td>\n",
       "      <td>749.619385</td>\n",
       "      <td>410.186157</td>\n",
       "      <td>1</td>\n",
       "      <td>0.011691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                n_genes  initial_size_unspliced  initial_size_spliced  \\\n",
       "AAAAAACCGCATTT     1408              464.344788           1878.552979   \n",
       "AAAAACACGGTAAC     1188              993.378540           1395.347656   \n",
       "AAAAACACTTAGAA      370               92.955063            354.261566   \n",
       "AAAAACCAATCTGG      669              388.409729            746.034668   \n",
       "AAAAACCATGTTGA      665              180.005600            749.619324   \n",
       "\n",
       "                initial_size    n_counts leiden  velocity_self_transition  \n",
       "AAAAAACCGCATTT   1878.552979  473.639679      2                  0.017104  \n",
       "AAAAACACGGTAAC   1395.347656  447.176758      3                  0.060644  \n",
       "AAAAACACTTAGAA    354.261597  398.229431      1                  0.103806  \n",
       "AAAAACCAATCTGG    746.034668  432.216125      2                  0.059894  \n",
       "AAAAACCATGTTGA    749.619385  410.186157      1                  0.011691  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_obs = get_dfs_obs_var(zarr_url, 'obs', mapping='__categories')\n",
    "df_obs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, for _uns_ and _layers_ and other classes, one needs to know the structure to retrieve the values.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retrieve X, obs and var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can combine our retrieval in one function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_remote_anndata_zarr(zarr_url, obs_mapping=None, var_mapping=None):\n",
    "    X_arr = zarr.open(zarr_url + \"/X\")\n",
    "    obs_df = get_dfs_obs_var(zarr_url, 'obs', mapping=obs_mapping)\n",
    "    var_df = get_dfs_obs_var(zarr_url, 'var', mapping=var_mapping)\n",
    "    adata = ad.AnnData(X=X_arr, obs=obs_df, var=var_df)\n",
    "    return adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "adata = load_remote_anndata_zarr(zarr_url, obs_mapping='__categories')\n",
    "adata"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
